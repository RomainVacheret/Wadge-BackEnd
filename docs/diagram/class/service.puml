@startuml service
!include ../style/commons.style

package dao.api {
    interface IFoodDao {}
    interface IFridgeDao {}
    interface IRecipeDao {}
}

package model.food {
    class Food {}
    enum Month {}
    class ConversionRequest{}
}

package model.fridge {
    class FridgeFood {}
    class FoodElement {}
    class UpdateResponse {}
}

package model.recipe {
    class Recipe {}
}

package service {
    package food {
        class FoodHelper{
            - this(): FoodHelper
            + enum Conversion {UNIT_TO_G, G_TO_UNIT}
            + fromUnitToG(food: Food, quantity: double): double <<static>>
            + fromGtoUnit(food: Food, quantity: double): double <<static>>
            + convert(type: Conversion, food: Food, quantity: double): double <<static>>
        }
        
        class FoodService {
            - foodDao: IFoodDao <<final>>
            + this(dao: FoodDao): FoodService
            + getAllFood(): List<Food>
            + getFoodFromGivenMonth(month: Month): List<Food>
            + sortByDays(food: List<Food>): List<Food>
            + getFoodFromString(string: String): Optional<Food>
            + convert(request: ConversionRequest): Optional<Double>
            + getUnits(ingredient: Ingredient): double
        }
    }

    package fridge {
        class FridgeService {
            - fridgeDao: IFridgeDao <<final>>
            - foodService: FoodService
            + enum RecallType { TWO_DAYS, FIVE_DAYS, SEVEN_DAYS, FOURTEEN_DAYS, EXPIRED, OTHER;}
            + this(fridgeDao: IFridgeDao, foodService: FoodService): FridgeService
            + addAllToFridge(food: List<FridgeFood>): boolean
            + getAllFridge(): List<FridgeFood>
            - getExpirationDateFromPredicate(): List<FridgeFood>
            + getExpirationList(): List<FridgeFood>
            + updateFridge(updateList: List<UpdateResponse>): List<FridgeFood>
            + deleteUsingId(ids: Set<Map.Entry<UUID, string>>): List<FridgeFood>
            + isInFridge(ingredient : Ingredient): String
        }

        class FoodElementPredicatesFactory {
            - dateFormater: SimpleDateFormat
            - currentDate: Date
            - instance: FoodElementPredicatesFactory
            - this(): FoodElementPredicatesFactory
            - dateDifference(d1: Date, d2: Date): long <<static>>
            + getInstance(): FoodElementPredicatesFactory <<static>>
            + dateProcessing(date: string): long
            - getPredicate(type: RecallType): Predicate<FoodElement>
        }
    }

    package recipe {
        package api {
            interface IRecipeSelection {
                select(): IRecipeSelection
                sort(): List<Recipe>
            }

            abstract class AbstractRecipeSelection {
                # recipes: Set<Recipe>
                # scores: List<Map.Entry<Integer, Recipe>>
                + compute(func: ToIntFunction<Recipe>): AbstractRecipeSelection <<abstract>>
                + filter(predicate: IntPredicate): AbstractRecipeSelection <<abstract>>
                + sort(comparator: Comparator<Map.Entry<Integer, Recipe>>): List<Recipe> <<abstract>>
            }
            
            interface IFridgeValueCalcuation {
                compute(recipe: Recipe, fridge: Map<RecallType,FridgeFood>): double
            }
        }
        package impl {
            class RecipeService {
                - recipeDao: IRecipeDao <<final>>
                - fridgeService: FridgeService <<final>>
                - marmitonDao: IExternalRecipeDao
                - specificRecipeDao: ISpecificRecipeDao
                - foodService: FoodService
                + this(dao: IRecipeDao, fridgeService: FridgeService, recipeExternalDao: IExternalRecipeDao, specificRecipeDao: ISpecificRecipeDao, foodService: FoodService): RecipeService
                + getAllRecipes(): List<Recipe>
                ~ recipeScoring: Function<Recipe, Integer>
                + getRecipesUsingFridge(products: Map<RecallType, List<string>>): List<Recipe>
                + getRecipesFromMarmiton(query: string): List<Recipe>
                + getRecipeIngredient(recipe: Recipe): Map<String, String>
                + getFavoriesRecipes():List<Recipe>
                + addFavoriteRecipe(Recipe recipe):void
                + deleteFavoriteRecipe(String link ):List<Recipe>
                + getDoneRecipes():List<Recipe>
                + addDoneRecipe(Recipe recipe):void
                + selectRecipes(param: Parameter): List<Recipe>
            }

            class SelectionWithFridge extends AbstractRecipeSelection {
                ~ scoringMap: Map<string, Integer> <<static>>
                + addToSet(mySet: Set<String>, key: String, value: Integer): void
                + defineScoringMap(products: Map<RecallType, List<String>>): void
                ~ ingredientScoring: Function<Ingredient, Optional<Integer>>
                ~ recipeScoring: Function<List<Ingredient>, Integer>
                ~ recipeToEntry: BiFunction<Recipe, ToIntFunction<Recipe>>
                + this(recipes: Set<Recipe>, fridgeService: FridgeService): SelectionWithFridge
            }

            class RecipeComparatorFactory {
                - this(): RecipeComparatorFactory
                + getComparator(parameter: Parameter): Comparator<Recipe> <<static>>
            }

            class RecipePredicateFactory {
                - this(): RecipePredicateFactory
                + getPredicate(prameter: Parameter): Predicate<Recipe> <<static>>
            }

            class RecipeSelection implements IRecipeSelection {
                - recipes: List<Recipe>
                + enum Parameter { BY_DIFFICULTY, BY_RATING, USING_FRIDGE, EVERYTHING,FAVORITE,REALISE, BY_INGREDIENTS, BY_UNIT}
                + this(recipes: Set<Recipe>): RecipeSelection
            }
        }
    }

    package shopping{

        class ShoppingService{
            - foodService : FoodService
            - shoppingList: Map<String, Ingredient>
            + this(foodService : FoodService)
            + getSgoppingList(): Set<Ingredient>
            + deleteFromShoppingList(elements: Set<String>): Set<Ingredient>
            + addToShoppingList(elements: Set<Ingredient>): Set<Ingredient>
        }
    }
}

FoodService o--> IFoodDao
FoodService *..> Food
FoodService *..> Month
FoodService o--> ConversionRequest
FoodService o--> Ingredient

FoodHelper o..> Food

FridgeService o--> IFridgeDao
FridgeService o--> FoodService
FridgeService o--> FridgeFood
FridgeService o--> Ingredient

FoodElementPredicatesFactory *..> FoodElement
FoodElementPredicatesFactory o..> FridgeService

RecipeService o--> IRecipeDao
RecipeService *..> Recipe
RecipeService o..> FridgeService
RecipeService o..> SelectionWithFridge
RecipeService o--> FridgeService
RecipeService o--> IExternalRecipeDao
RecipeService o--> ISpecificRecipeDao
RecipeService o--> FoodService
RecipeService o--> RecipeSelection

SelectionWithFridge *--> Recipe
SelectionWithFridge o..> FridgeService
SelectionWithFridge o--> FridgeService
SelectionWithFridge o--> FridgeService

RecipeComparatorFactory o--> RecipeSelection
RecipeComparatorFactory o--> Recipe

RecipePredicateFactory o--> RecipeSelection
RecipePredicateFactory o--> Recipe

RecipeSelection *--> Recipe

ShoppingService o..> FoodService
ShoppingService *..> Ingredient

@enduml

