@startuml service
!include ../style/commons.style

package dao.api {
    interface IFoodDao {}
    interface IFridgeDao {}
    interface IRecipeDao {}
}

package model.food {
    class Food {}
    enum Month {}
    class ConversionRequest{}
}

package model.fridge {
    class FridgeFood {}
    class FoodElement {}
    class UpdateResponse {}
}

package model.recipe {
    class Recipe {}
}

package service {
    package food {
        class FoodHelper{
            - FoodHelper()
            fromUnitToG(food: Food, quantity: double): double
            fromGtoUnit(food: Food, quantity: double): double
            + convert(type: Conversion, food: Food, quantity: double): double
        }
        enum Conversion {
                UNIT_TO_G, G_TO_UNIT
        }
        class FoodService {
            - foodDao: IFoodDao <<static>>
            + this(dao: FoodDao): FoodService
            + getAllFood(): List<Food>
            + getFoodFromGivenMonth(month: Month): List<Food>
            + sortByDays(food: List<Food>): List<Food>
            + getFoodFromString(string: String): Optional<Food>
            + convert(request: ConversionRequest): Optional<Double>
        }
    }

    package fridge {
        class FridgeService {
            - fridgeDao: IFridgeDao <<static>>
            + this(dao: FridgeDao): FridgeService
            + getAllFridge(): List<FridgeFood>
            + getExpirationList(): List<FridgeFood>
            + addAllToFridge(food: List<FridgeFood>): boolean
            + updateFridge(updateList: List<UpdateResponse>)        
            + deleteUsingId(ids: Set<Map.Entry<UUID, string>>): List<FridgeFood>
            - getExpirationDateFromPredicate(): List<FridgeFood>
            - isInFridge(ingredient : Ingredient): String
        }

        class FoodElementPredicatesFactory {
            - dateFormater: SimpleDateFormat
            - currentDate: Date
            - instance: FoodElementPredicatesFactory
            - this(): FoodElementPredicatesFactory
            - dateDifference(d1: Date, d2: Date): long <<static>>
            + getInstance(): FoodElementPredicatesFactory <<static>>
            + dateProcessing(date: string): long
            - getPredicate(type: RecallType): Predicate<FoodElement>
        }
        
        enum RecallType {
            TWO_DAYS, FIVE_DAYS, SEVEN_DAYS, FOURTEEN_DAYS, EXPIRED, OTHER;
        }
    }

    package recipe {
        package api {
            interface IRecipeSelection {
                select(): IRecipeSelection
                sort(): List<Recipe>
            }

            abstract class AbstractRecipeSelection {
                # recipes: Set<Recipe>
                # scores: List<Map.Entry<Integer, Recipe>>
                + compute(func: ToIntFunction<Recipe>): AbstractRecipeSelection <<abstract>>
                + filter(predicate: IntPredicate): AbstractRecipeSelection <<abstract>>
                + sort(comparator: Comparator<Map.Entry<Integer, Recipe>>): List<Recipe> <<abstract>>
            }
            
        }
        package impl {
            class RecipeService {
                - recipeDao: IRecipeDao <<static>>
                + this(dao: IRecipeDao): RecipeService
                + getAllRecipes(): List<Recipe>
                + getRecipesUsingFridge(products: Map<RecallType, List<string>>): List<Recipe>
                + getRecipesUsingUserList(userSelection : List<String>): List<Recipe>
                + getRecipesFromMarmiton(query: string): List<Recipe>
                + getRecipeIngredient(recipe: Recipe): Map<String, String>
                + selectRecipes(param: Parameter): List<Recipe>
            }

            class SelectionWithFridge extends AbstractRecipeSelection {
                ~ scoringMap: Map<string, Integer> <<static>>
                ~ ingredientScoring: Function<Ingredient, Optional<Integer>>
                ~ recipeScoring: Function<List<Ingredient>, Integer>
                ~ recipeToEntry: BiFunction<Recipe, ToIntFunction<Recipe>>
                + this(recipes: Set<Recipe>, fridgeService: FridgeService): SelectionWithFridge
            }
        }
    }

    package map {
        class MapService {
            - KEY: string <<static final>>
            + jsonToFile(fileName: string, json: JSONObject): void
            + request(lat: double, lng: double): JSONObject
            + parseJSON(json: JSONArray): JSONArray
        }
    }
    package shopping{

        class ShoppingService{
            - foodService : FoodService
            - shoppingList: Map<String, Ingredient>
            + this(foodService : FoodService)
            + getSgoppingList(): Set<Ingredient>
            + deleteFromShoppingList(elements: Set<String>): Set<Ingredient>
            + addToShoppingList(elements: Set<Ingredient>): Set<Ingredient>
        }
    }
}

FoodService o--> IFoodDao
FoodService *..> Food
FoodService *..> Month
FoodService o--> ConversionRequest

FoodHelper o..> Conversion

FridgeService o--> IFridgeDao
FridgeService o..> FoodElementPredicatesFactory
FridgeService *--> FridgeFood
FridgeService *--> FoodElement
FridgeService *..> FoodElement
FridgeService o..> UpdateResponse

FoodElementPredicatesFactory *..> FoodElement
FoodElementPredicatesFactory o..> RecallType

RecipeService o--> IRecipeDao
RecipeService *..> Recipe
RecipeService o..> RecallType
RecipeService o.> SelectionWithFridge

SelectionWithFridge *--> Recipe
SelectionWithFridge o..> FridgeService

UserListSelection *--> Recipe

ShoppingService o..> FoodService
ShoppingService *..> Ingredient

@enduml