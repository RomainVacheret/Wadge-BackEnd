@startuml wadgeBackEnd

package com.fastxml.jackson.databind {
    class JsonNode {}
    class ObjectMapper {}
}

package main.java.wadge{
    package backend{
        class Application {
            + main(args: []string): void <<static>>
        }
        class HelloController {
            + getCloseShops(lat: double, lng: double): ResponseEntity<JSONObject>
            + getRecipes(): ResponseEntity<List<Map<string, Object>>>
            }
        class FoodController{
            - FOOD_LIST: string <<final>> <<static>>
            + getFoodList(): List<Food>
            + getMonth(month: string): List<Food>
        }
        class FridgeController{
            - FRIDGE: string <<static>>
            + getFridge(): List<FridgeFood>
            + addToFridge(foodList: string): List<FridgeFood>
            + getExpirationAlerts(): Map<string, List<FridgeFood>>
        }
    }
    package fridge{

        package fridge.api{
            interface IFridge {
                writeFridge(fileName: string): void
                readFridge(fileName: string): void
                addToFridge(newFoods: List<FridgeFood>): void
             }

            interface IDataManager {
                readFile(fileName: string): List<FridgeFood>
                readJson(node: JsonNode): List<FridgeFood>
                writeFile(data: List<FridgeFood>, fileName: string): void
            }
        }

        package fridge.impl{

            class ExpirationRecall {
                - getExpirationDateFromPredicate(predicate: Predicate<FoodElement>, fileName: string): List<FridgeFood> <<static>>
                - getExpirationList(type: RecallType, fileName: string): List<FridgeFood> <<static>>
            }
            
            enum RecallType {
                TWO_DAYS, FIVE_DAYS, SEVEN_DAYS, FORTEEN_DAYS, EXPIRED, OTHER
            }

            class DataManager implements IDataManager{
                - mapper: ObjectMapper <<final>>
                - instance: IDataManager <<static>>
                - this(): DataManager
                + getInstance(): IDataManager
                + readFile(fileName: string): List<FridgeFood>
                + readJson(node: JsonNode): List<FridgeFood>
                + writeFile(data: List<FridgeFood>, fileName: string): void
             }

            class FoodElement {
                - insertionDate: string
                - peremptionDate: string
                - quantity: int
                + this()
                + this(insertionDate: string, peremptionDate: string, quantity: int)
                + getInsertionDate(): string
                + getPeremptionDate(): string
                + getQuantity(): int
                + toString(): string
                + hashCode(): int
                + equals(obj: Object): boolean
            }

            class FoodElementPredicatesFactory {
                - dateFormater: SimpleDateFormat
                - currentDate: Date
                - instance: FoodElementPredicatesFactory
                - this()
                - dateDifference(d1: Date, d2: Date): long <<static>>
                + getInstance(): FoodElementPredicatesFactory <<static>>
                + dateProcessing(date: string): long
                - getPredicate(type: RecallType): Predicate<FoodElement>
            }

            class Fridge implements IFridge{
                - foods: List<FridgeFood>
                - mapper: ObjectMapper <<final>>
                - manager: IDataManager <<final>>
                - instance: FridgeFridge <<static>>
                - this(): Fridge
                + getInstance(): Fridge <<static>>
                + readFridge(fileName: string): void
                + writeFridge(fileName: string): void
                + addToFridge(newFoods: List<FridgeFood>): void
                + getFood(): List<FridgeFood>
            }

            class FridgeFood{
                - name: string
                - products: List<FoodElement>
                - this()
                - this(name: string, products: List<FoodElement>)
                + getName(): string
                + getProducts(): List<FoodELement>
                + toString(): string
                + hashCode(): int
                + equals(obj: Object): boolean
            }
        }
    }

    package food{

        package food.api{
            interface IFoodList{
                readFile(fileName: string): void
                getFoodFromGivenMonth(month: Month): List<Food> 
            }

            enum Month{
                JANUARY,
                FEBRUARY,
                MARCH,
                APRIL,
                MAY,
                JUN,
                JULY,
                AUGUST,
                SEPTEMBER,
                OCTOBER,
                NOVEMBER,
                DECEMBER;
            }
        }

        package food.impl{
            class Food {
                - name: string
                - type: string
                - availability: List<string>
                - days: int
                + this()
                + this(name: string, type: string, availability: string[], days: int)
                + getName(): string
                + getType(): string
                + getAvailability(): List<string>
                + getDays(): int
                + hashCode(): int
                + equals(obj: Object): boolean
                + toString(): string
            }
            
            class FoodList implements IFoodList {
                - foods: List<Food>
                - <<final>> mapper: ObjectMapper
                - <<static>> instance: FoodList
                - this()
                + <<static>> getInstance(): FoodList
                + getFoodFromGivenMonth(month: Month): List<Food>
                + readFile(fileName: string): void
                + getFoods(): List<Food>
            }
        }
    }
    
    package google{

         class Search {
            - KEY: string <<static final>>
            + jsonToFile(fileName: string, json: JSONObject): void
            + request(lat: double, lng: double): JSONObject
            + parseJSON(json: JSONArray): JSONArray
        }
    }

    package recipe{

        class Recipe {
            - name: string <<final>>
            - steps: List<string> <<final>>
            - quantity: Object <<final>>
            - ingredient: List<Map<string, Object>>
            + this(name: string, steps: List<string>, quantity: Object, ingredients: List<Map<string, Object>>): Recipe
            + readRecipes(): List<Map<string, Object>> <<static>>
        }

        class RecipeBuilder {
            - name: string <<final>>
            - steps: List<string> <<final>>
            - quantity: Object <<final>>
            - ingredient: List<Map<string, Object>>
            + this(name: string): RecipeBuilder
            + readRecipes(): List<Map<string, Object>>
        }

        
    }

    HelloController o..> Search
    HelloController o..> Recipe
    FoodController o..> FoodList
    RecipeBuilder o..> Recipe
    FridgeController o..> Fridge
    FridgeController o..> RecallType
    FridgeController o..> ExpirationRecall
    FoodList o..> Food
    Fridge *--> FridgeFood
    Fridge *--> IDataManager
    Fridge *--> ObjectMapper
    FridgeFood o..> FoodElement
    ExpirationRecall o..> RecallType
    DataManager *--> IDataManager
    DataManager *--> ObjectMapper
    DataManager *..> JsonNode
}

@enduml