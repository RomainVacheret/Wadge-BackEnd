@startuml Wadge-BackEnd
    package main.java.wadge{
        package backend {
            class Application {
                + main(args: []string): void <<static>>
            }

            class HelloControler {
                - expirationTypes: List<string> <<static>>
                - FRIDGE_FILE: string <<static>>
                - FOOD_FILE: string <<static>>
                + createFridge(food: List<Map<string, object>>): void
                + readFile(): ResponseEntity<List<Map<string, Object>>>
                + readFridge2(): ResponseEntity<List<Map<string, Object>>>
                + getMonth(month: string): ResponseEntity<List<Map<string, Object>>>
                + getCloseShops(lat: double, lng: double): ResponseEntity<JSONObject>
                + getExpirationAlert(type: string): ResponseEntity<List<Map<string, string>>>
                + getExpirationAlerts(): ResponseEntity<List<Map<string, string>>>
                + getRecipes(): ResponseEntity<List<Map<string, Object>>>
                + readFridge(): ResponseEntity<List<Map<string, Object>>>
            }
            
        }

        package food_list {
            class FoodList {
                - this()
                + readFile(fileName: string): List<Map<string, Object>> <<static>>
                + foodFromMonth(month: string): List<Map<string, Object>> <<static>>
            }
        }

        package fridge {
            class Fridge {
                + writeFride(newElements: List<Map<string, Object>>): void <<static>>
                + mergeList(l1: List<Map<string, Object>>, l2: List<Map<string, Object>>): void <<static>>
                + readFile(fileName: string): List<Map<string, Object>> <<static>>
                - formatConverter(elements: List<Map<string, Object>>): List<Map<string, Object>> <<static>>
                - getKeys(list: List<Map<string, Object>>): List<string> <<static>>
                - listDifference(l1: List<string>, l2: List<string>): List<string> <<static>>
                - findElementInList(list: List<Map<string, Object>>, name: string): List<Map<string, Object>> <<static>>
                - addProductToElement(element: Map<string, Object>, elementToAdd: void

            }

            class ExpirationRecall {
                - dateFormater: SimpleDateFormat <<final>>
                - currentDate: Date <<final>>
                + this(): ExpirationRecall
                + getExpirationList(type: RecallType): List<Map<string, string>>
                - dateDifference(d1: Date, d2: Date): long <<static>>
                - getExpirationDateFromPredicate(predicate Predicate<Long>): List<Map<string, string>>

            }
            ExpirationRecall o..> RecallType

            enum RecallType {
                TWO_DAYS, FIVE_DAYS, SEVEN_DAYS, FORTEEN_DAYS, EXPIRED
            }
        }

        package google {
            class Search {
                - KEY: string <<static final>>
                + jsonToFile(fileName: string, json: JSONObject): void
                + request(lat: double, lng: double): JSONObject
                + parseJSON(json: JSONArray): JSONArray
            }
        }

        package recipe {
            class Recipe {
                - name: string <<final>>
                - steps: List<string> <<final>>
                - quantity: Object <<final>>
                - ingredient: List<Map<string, Object>>
                + this(name: String, steps: List<string>, quantity: Object, ingredients: List<Map<string, Object>>): Recipe
                + readRecipes(): List<Map<string, Object>> <<static>>
            }

            class RecipeBuilder {
                - name: string <<final>>
                - steps: List<string> <<final>>
                - quantity: Object <<final>>
                - ingredient: List<Map<string, Object>>
                + this(name: string): RecipeBuilder
                + withSteps(steps: List<string>): RecipeBuilder
                + withQuantity(quantity: Object): RecipeBuilder
                + withIngredients(ingredients: List<Map<string, Object>>): RecipeBuilder
                + generate(): Recipe
            }
            RecipeBuilder o..> Recipe
        }
    }

    HelloControler o..> FoodList
    HelloControler o..> ExpirationRecall
    HelloControler o..> Search
    HelloControler o..> Fridge
    HelloControler o..> Recipe

@enduml